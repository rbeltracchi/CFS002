/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mil.sda111mil.forms;

import com.mil.sda111mil.beans.Curso;
import com.mil.sda111mil.services.Service;
import com.mil.sda111mil.beans.Preceptor;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CF02
 */
public class FormPreceptor extends javax.swing.JInternalFrame {

    private static Preceptor preceptorLogueado;

    /**
     * Creates new form FormAlumno
     */
    FormPreceptor() {
        initComponents();
        //creo el formulario preceptor con la lista de cursos vacia
        listaCursos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {"NINGUNO"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        inhabilitar();
        mostrarListaPreceptores();

    }

    public void mostrarListaPreceptores() {
        DefaultTableModel modelo;

        String[] titulos = {"DNI", "Apellido", "Nombre", "Curso"};

        modelo = new NoEditableModel(null, titulos);

        List<Preceptor> lista = Service.listarPreceptores();

        for (Preceptor p : lista) {
            Object[] o = new Object[4];
            o[0] = p.getDni();
            o[1] = p.getApellido();
            o[2] = p.getNombre();
            o[3] = p.getCursos();
            modelo.addRow(o);
        }

        tablaListado.setModel(modelo);
        tablaListado.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {

                // do some actions here, for example
                // print first column value from selected row
                if (tablaListado.getSelectedRow() >= 0) {
                    String dni = tablaListado.getValueAt(tablaListado.getSelectedRow(), 0).toString();
                    cargarFichaPreceptor(dni);
                }
            }

        });
        cantPreceptores.setText(String.valueOf(lista.size()));
    }

    public void mostrarPreceptorBuscado() {
        DefaultTableModel modelo;

        String[] titulos = {"DNI", "Apellido", "Nombre", "Curso"};

        modelo = new DefaultTableModel(null, titulos);

        List<Preceptor> lista = Service.encontrarPreceptor(txt_buscar_nombre.getText(), txt_buscar_apellido.getText());

        for (Preceptor p : lista) {
            Object[] o = new Object[4];
            o[0] = p.getDni();
            o[1] = p.getApellido();
            o[2] = p.getNombre();
            String curso = "";
            for (Curso c : p.getCursos()) {
                curso = curso + c.getCurso() + "°" + c.getDivision() + "/ ";
            }
            o[3] = curso;

            modelo.addRow(o);
        }

        tablaListado.setModel(modelo);
    }

    private void cargarFichaPreceptor(String dni) {
        habilitar();
        txt_dni_p.setEnabled(false);
        Preceptor elegido = Service.listarPreceptorPorDni(dni);
        txt_dni_p.setText(dni);
        txt_nombre.setText(elegido.getNombre());
        txt_apellido.setText(elegido.getApellido());
        txt_domicilio.setText(elegido.getDireccion());
        txt_contrasenia.setText(elegido.getContrasenia());
        txt_telefono_numero.setText(String.valueOf(elegido.getTelefono()));
        String[] cursos = new String[elegido.getCursos().size() + Service.listarCursosDisponibles().size()];
        int i = 0;
        for (Curso c : elegido.getCursos()) {
            cursos[i] = c.getCurso() + "°" + c.getDivision();
            i++;
        }
        for (Curso cur : Service.listarCursosDisponibles()) {
            cursos[i] = cur.getCurso() + "°" + cur.getDivision();
            i++;
        }

        listaCursos.setListData(cursos);
        
        int[] indices = new int[elegido.getCursos().size()]; 
        i=0;
        for (Curso c : elegido.getCursos()) {
            indices[i] = i;
            i++;
        }

        listaCursos.setSelectedIndices(indices);
        
        btn_guardar.setEnabled(false);
        btn_cancelar.setEnabled(false);
        btn_modificar.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registroPreceptores = new javax.swing.JPanel();
        Nombre = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        Apellido = new javax.swing.JLabel();
        txt_apellido = new javax.swing.JTextField();
        Domicilio = new javax.swing.JLabel();
        txt_domicilio = new javax.swing.JTextField();
        Telefono = new javax.swing.JLabel();
        txt_telefono_numero = new javax.swing.JTextField();
        Curso = new javax.swing.JLabel();
        btn_guardar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaCursos = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        Ingreso = new javax.swing.JLabel();
        chk_contrasenia = new javax.swing.JCheckBox();
        Password = new javax.swing.JLabel();
        txt_contrasenia = new javax.swing.JPasswordField();
        DNI = new javax.swing.JLabel();
        txt_dni_p = new javax.swing.JTextField();
        btn_modificar = new javax.swing.JButton();
        cboSexo = new javax.swing.JComboBox<>();
        Sexo = new javax.swing.JLabel();
        listaPreceptores = new javax.swing.JPanel();
        btn_salir = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        btn_buscar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaListado = new javax.swing.JTable();
        lblTotalRegistros = new javax.swing.JLabel();
        txt_buscar_nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_buscar_apellido = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btn_nuevo = new javax.swing.JButton();
        cantPreceptores = new javax.swing.JTextField();
        btn_refresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Preceptor");
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setVisible(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        registroPreceptores.setBackground(new java.awt.Color(255, 255, 204));
        registroPreceptores.setBorder(javax.swing.BorderFactory.createTitledBorder("Registro de Preceptores"));
        registroPreceptores.setForeground(new java.awt.Color(250, 250, 250));
        registroPreceptores.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Nombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Nombre.setText("Nombre:");
        Nombre.setMaximumSize(new java.awt.Dimension(60, 15));
        Nombre.setMinimumSize(new java.awt.Dimension(60, 15));
        Nombre.setPreferredSize(new java.awt.Dimension(60, 22));
        registroPreceptores.add(Nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 70, 30));

        txt_nombre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_nombre.setPreferredSize(new java.awt.Dimension(100, 25));
        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        txt_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nombreKeyTyped(evt);
            }
        });
        registroPreceptores.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 170, 30));

        Apellido.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Apellido.setText("Apellido:");
        Apellido.setMaximumSize(new java.awt.Dimension(60, 15));
        Apellido.setMinimumSize(new java.awt.Dimension(60, 15));
        Apellido.setPreferredSize(new java.awt.Dimension(60, 22));
        registroPreceptores.add(Apellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 70, 30));

        txt_apellido.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_apellido.setPreferredSize(new java.awt.Dimension(100, 25));
        txt_apellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_apellidoActionPerformed(evt);
            }
        });
        txt_apellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_apellidoKeyTyped(evt);
            }
        });
        registroPreceptores.add(txt_apellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 170, 30));

        Domicilio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Domicilio.setText("Domicilio:");
        Domicilio.setMaximumSize(new java.awt.Dimension(60, 15));
        Domicilio.setMinimumSize(new java.awt.Dimension(60, 15));
        Domicilio.setPreferredSize(new java.awt.Dimension(60, 22));
        registroPreceptores.add(Domicilio, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 80, 30));

        txt_domicilio.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_domicilio.setPreferredSize(new java.awt.Dimension(100, 25));
        txt_domicilio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_domicilioActionPerformed(evt);
            }
        });
        txt_domicilio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_domicilioKeyTyped(evt);
            }
        });
        registroPreceptores.add(txt_domicilio, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 170, 30));

        Telefono.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Telefono.setText("Teléfono:");
        Telefono.setMaximumSize(new java.awt.Dimension(60, 15));
        Telefono.setMinimumSize(new java.awt.Dimension(60, 15));
        Telefono.setPreferredSize(new java.awt.Dimension(60, 22));
        registroPreceptores.add(Telefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 80, 30));

        txt_telefono_numero.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_telefono_numero.setPreferredSize(new java.awt.Dimension(100, 25));
        txt_telefono_numero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_telefono_numeroActionPerformed(evt);
            }
        });
        txt_telefono_numero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_telefono_numeroKeyTyped(evt);
            }
        });
        registroPreceptores.add(txt_telefono_numero, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 170, 30));

        Curso.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Curso.setText("Cursos Asignados:");
        Curso.setMaximumSize(new java.awt.Dimension(60, 15));
        Curso.setMinimumSize(new java.awt.Dimension(60, 15));
        Curso.setPreferredSize(new java.awt.Dimension(60, 22));
        registroPreceptores.add(Curso, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 140, 30));

        btn_guardar.setBackground(new java.awt.Color(51, 51, 51));
        btn_guardar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_guardar.setForeground(new java.awt.Color(255, 255, 255));
        btn_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/if_Save_24x24.png"))); // NOI18N
        btn_guardar.setText("Guardar");
        btn_guardar.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });
        registroPreceptores.add(btn_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 600, -1, -1));

        btn_cancelar.setBackground(new java.awt.Color(51, 51, 51));
        btn_cancelar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_cancelar.setForeground(new java.awt.Color(255, 255, 255));
        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/if_Cancel_24x24.png"))); // NOI18N
        btn_cancelar.setText("Cancelar");
        btn_cancelar.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });
        registroPreceptores.add(btn_cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 600, -1, -1));

        listaCursos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listaCursos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "1º A", "1º B", "2º A", "2º B", "3º A", "3º B", "4º A", "4º B" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaCursos);

        registroPreceptores.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 100, 190));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), null));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Ingreso.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Ingreso.setText("Datos de Ingreso:");
        Ingreso.setMaximumSize(new java.awt.Dimension(60, 15));
        Ingreso.setMinimumSize(new java.awt.Dimension(60, 15));
        Ingreso.setPreferredSize(new java.awt.Dimension(60, 22));
        jPanel1.add(Ingreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, 30));

        chk_contrasenia.setBackground(new java.awt.Color(255, 255, 204));
        chk_contrasenia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chk_contrasenia.setText("Mostrar/Ocultar Contraseña");
        chk_contrasenia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_contraseniaActionPerformed(evt);
            }
        });
        jPanel1.add(chk_contrasenia, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 200, 30));

        Password.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Password.setText("Contraseña:");
        Password.setMaximumSize(new java.awt.Dimension(60, 15));
        Password.setMinimumSize(new java.awt.Dimension(60, 15));
        Password.setPreferredSize(new java.awt.Dimension(60, 22));
        jPanel1.add(Password, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 90, 30));

        txt_contrasenia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_contrasenia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_contraseniaActionPerformed(evt);
            }
        });
        txt_contrasenia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_contraseniaKeyTyped(evt);
            }
        });
        jPanel1.add(txt_contrasenia, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 170, 30));

        DNI.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DNI.setText("DNI:");
        DNI.setMaximumSize(new java.awt.Dimension(60, 15));
        DNI.setMinimumSize(new java.awt.Dimension(60, 15));
        DNI.setPreferredSize(new java.awt.Dimension(60, 22));
        jPanel1.add(DNI, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 30));

        txt_dni_p.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_dni_p.setPreferredSize(new java.awt.Dimension(100, 25));
        txt_dni_p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_dni_pActionPerformed(evt);
            }
        });
        txt_dni_p.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_dni_pKeyTyped(evt);
            }
        });
        jPanel1.add(txt_dni_p, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 170, 30));

        registroPreceptores.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 250, 300, 190));

        btn_modificar.setBackground(new java.awt.Color(51, 51, 51));
        btn_modificar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_modificar.setForeground(new java.awt.Color(255, 255, 255));
        btn_modificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/Edit_24x24.png"))); // NOI18N
        btn_modificar.setText("Modificar");
        btn_modificar.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });
        registroPreceptores.add(btn_modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 600, -1, -1));

        cboSexo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculino", "Femenino" }));
        registroPreceptores.add(cboSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, 100, 30));

        Sexo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Sexo.setText("Sexo:");
        Sexo.setMaximumSize(new java.awt.Dimension(60, 15));
        Sexo.setMinimumSize(new java.awt.Dimension(60, 15));
        Sexo.setPreferredSize(new java.awt.Dimension(60, 22));
        registroPreceptores.add(Sexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 50, 30));

        getContentPane().add(registroPreceptores, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 670));

        listaPreceptores.setBackground(new java.awt.Color(255, 255, 153));
        listaPreceptores.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de Preceptores"));
        listaPreceptores.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_salir.setBackground(new java.awt.Color(51, 51, 51));
        btn_salir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_salir.setForeground(new java.awt.Color(255, 255, 255));
        btn_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/if_Log Out_24x24.png"))); // NOI18N
        btn_salir.setText("Salir");
        btn_salir.setMaximumSize(new java.awt.Dimension(143, 41));
        btn_salir.setMinimumSize(new java.awt.Dimension(143, 41));
        btn_salir.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salirActionPerformed(evt);
            }
        });
        listaPreceptores.add(btn_salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, -1, -1));

        btn_eliminar.setBackground(new java.awt.Color(51, 51, 51));
        btn_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/if_Remove_24x24.png"))); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });
        listaPreceptores.add(btn_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, -1, -1));

        btn_buscar.setBackground(new java.awt.Color(51, 51, 51));
        btn_buscar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_buscar.setForeground(new java.awt.Color(255, 255, 255));
        btn_buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/if_Search_24x24.png"))); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.setMaximumSize(new java.awt.Dimension(143, 41));
        btn_buscar.setMinimumSize(new java.awt.Dimension(143, 41));
        btn_buscar.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        listaPreceptores.add(btn_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        tablaListado.setAutoCreateRowSorter(true);
        tablaListado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Curso", "DNI", "Contraseña"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaListado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaListadoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaListado);

        listaPreceptores.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 680, 450));

        lblTotalRegistros.setBackground(new java.awt.Color(255, 255, 255));
        lblTotalRegistros.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalRegistros.setText("Registros");
        lblTotalRegistros.setPreferredSize(new java.awt.Dimension(60, 22));
        listaPreceptores.add(lblTotalRegistros, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 70, 30));

        txt_buscar_nombre.setMaximumSize(new java.awt.Dimension(6, 21));
        txt_buscar_nombre.setMinimumSize(new java.awt.Dimension(6, 21));
        txt_buscar_nombre.setPreferredSize(new java.awt.Dimension(6, 21));
        txt_buscar_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscar_nombreActionPerformed(evt);
            }
        });
        listaPreceptores.add(txt_buscar_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 38, 110, 30));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Nombre:");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setPreferredSize(new java.awt.Dimension(60, 22));
        listaPreceptores.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 38, 70, 30));

        txt_buscar_apellido.setMaximumSize(new java.awt.Dimension(6, 21));
        txt_buscar_apellido.setMinimumSize(new java.awt.Dimension(6, 21));
        txt_buscar_apellido.setPreferredSize(new java.awt.Dimension(6, 21));
        listaPreceptores.add(txt_buscar_apellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 38, 110, 30));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Apellido:");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setPreferredSize(new java.awt.Dimension(60, 22));
        listaPreceptores.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 38, 60, 30));

        btn_nuevo.setBackground(new java.awt.Color(51, 51, 51));
        btn_nuevo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btn_nuevo.setForeground(new java.awt.Color(255, 255, 255));
        btn_nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/if_Add_24x24.png"))); // NOI18N
        btn_nuevo.setText("Nuevo");
        btn_nuevo.setBorder(null);
        btn_nuevo.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nuevoActionPerformed(evt);
            }
        });
        listaPreceptores.add(btn_nuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, -1, -1));
        listaPreceptores.add(cantPreceptores, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 600, 50, 30));

        btn_refresh.setBackground(new java.awt.Color(51, 51, 51));
        btn_refresh.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_refresh.setForeground(new java.awt.Color(255, 255, 255));
        btn_refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/24x24/reload-icon_24x24.png"))); // NOI18N
        btn_refresh.setText("Actualizar");
        btn_refresh.setMaximumSize(new java.awt.Dimension(143, 41));
        btn_refresh.setMinimumSize(new java.awt.Dimension(143, 41));
        btn_refresh.setPreferredSize(new java.awt.Dimension(120, 30));
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });
        listaPreceptores.add(btn_refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 90, -1, -1));

        getContentPane().add(listaPreceptores, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 0, 760, 670));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_dni_pActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_dni_pActionPerformed
        txt_dni_p.transferFocus();
    }//GEN-LAST:event_txt_dni_pActionPerformed

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        txt_nombre.transferFocus();
    }//GEN-LAST:event_txt_nombreActionPerformed

    private void txt_apellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_apellidoActionPerformed
        txt_apellido.transferFocus();
    }//GEN-LAST:event_txt_apellidoActionPerformed

    private void txt_domicilioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_domicilioActionPerformed
        txt_domicilio.transferFocus();
    }//GEN-LAST:event_txt_domicilioActionPerformed

    private void btn_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nuevoActionPerformed

        habilitar();
        listaCursos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] lista = listarCursosDisponibles();

            public int getSize() {
                return lista.length;
            }

            public String getElementAt(int i) {
                return lista[i];
            }
        });
        if (Service.listarCursosDisponibles().isEmpty()) {
            inhabilitar();
            JOptionPane.showMessageDialog(rootPane, "No hay Cursos disponibles para un nuevo Preceptor");
        }
        btn_guardar.setText("Guardar");
        cleanPreceptorForm();
        btn_modificar.setEnabled(false);
    }//GEN-LAST:event_btn_nuevoActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed

        if (txt_nombre.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un Nombre para el Preceptor");
            txt_nombre.requestFocus();
            return;
        }
        if (txt_apellido.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un Apellido para el Preceptor");
            txt_apellido.requestFocus();
            return;
        }
        if (txt_domicilio.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un Domicilio para el Preceptor");
            txt_domicilio.requestFocus();
            return;
        }
        if (listaCursos.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Debes elegir al menos un Curso para el Preceptor");
            listaCursos.requestFocus();
            return;
        }
        if (txt_dni_p.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un DNI para el Preceptor");
            txt_dni_p.requestFocus();
            return;
        }
        if (txt_contrasenia.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar una Contraseña para el Preceptor");
            txt_contrasenia.requestFocus();
            return;
        }
        if (txt_telefono_numero.getText().length() != 10) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un numero de teléfono de 10 digitos para el Preceptor");
            txt_telefono_numero.requestFocus();
            return;
        }

        
        String password = "";
        int i = 0;
        while (i < txt_contrasenia.getPassword().length) {
            password = password + String.valueOf(txt_contrasenia.getPassword()[i]);
            i++;
        }
        int sexoPreceptor = cboSexo.getSelectedIndex();
        String genero = "M";
        if (sexoPreceptor == 1) {
            genero = "F";
        }
        Service.crearPreceptor(Integer.valueOf(txt_dni_p.getText()), txt_nombre.getText(), txt_apellido.getText(), txt_domicilio.getText(),
                txt_telefono_numero.getText(), password, genero);
        
        Service.asignarCursoPreceptor(Integer.valueOf(txt_dni_p.getText()), listaCursos.getSelectedValuesList());

        inhabilitar();
        listaCursos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {"NINGUNO"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        // Vacio todos los campos de texto limpio la lista de seleccion de curso y limpio el campo de la fecha

        inhabilitar();
        mostrarListaPreceptores();

        JOptionPane.showMessageDialog(rootPane, "Los Datos del Preceptor " + txt_dni_p.getText() + " Fueron Guardados Exitosamente");
        btn_guardar.setText("Guardar");
    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        cleanPreceptorForm();
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void txt_telefono_numeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_telefono_numeroActionPerformed
        txt_telefono_numero.transferFocus();
    }//GEN-LAST:event_txt_telefono_numeroActionPerformed

    private void chk_contraseniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_contraseniaActionPerformed
        if (chk_contrasenia.isSelected()) {
            txt_contrasenia.setEchoChar((char) 0);
        } else {
            txt_contrasenia.setEchoChar('*');
        }
    }//GEN-LAST:event_chk_contraseniaActionPerformed

    private void txt_contraseniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_contraseniaActionPerformed
        txt_contrasenia.transferFocus();
    }//GEN-LAST:event_txt_contraseniaActionPerformed

    private void txt_dni_pKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_dni_pKeyTyped
        char validar = evt.getKeyChar();
        if ((validar < '0' || validar > '9') && (validar != (char) KeyEvent.VK_BACK_SPACE) && (validar != (char) KeyEvent.VK_ENTER) && (validar < '°' || validar > '°')) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Debes Ingresar Sólo Números", "Advertencia", 2);
            txt_dni_p.setCursor(null);
        }
    }//GEN-LAST:event_txt_dni_pKeyTyped

    private void txt_telefono_numeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_telefono_numeroKeyTyped
        char validar = evt.getKeyChar();
        if (Character.isLetter(validar) || Character.isSpaceChar(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Debes Ingresar Sólo Números", "Advertencia", 2);
            txt_telefono_numero.setCursor(null);
        }
    }//GEN-LAST:event_txt_telefono_numeroKeyTyped

    private void txt_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombreKeyTyped
        char validar = evt.getKeyChar();

        if (Character.isDigit(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Debes Ingresar Sólo Letras", "Advertencia", 2);
            txt_nombre.setCursor(null);
        }
    }//GEN-LAST:event_txt_nombreKeyTyped

    private void txt_apellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_apellidoKeyTyped
        char validar = evt.getKeyChar();

        if (Character.isDigit(validar)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Debes Ingresar Sólo Letras", "Advertencia", 2);
            txt_apellido.setCursor(null);
        }
    }//GEN-LAST:event_txt_apellidoKeyTyped

    private void btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salirActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Realmente deseas salir?", "Confirmar Salida", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE);
        if (opcion == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_btn_salirActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        if (tablaListado.getSelectedRow() >= 0) {
            String dni = tablaListado.getValueAt(tablaListado.getSelectedRow(), 0).toString();
            if (dni.equals(String.valueOf(preceptorLogueado.getDni()))) {
                    JOptionPane.showMessageDialog(rootPane, "No se puede eliminar el preceptor actualmente logueado al sistema.");
            } else {

            Service.quitarCursoPreceptor(Integer.valueOf(dni));
            Service.bajaPreceptor(Integer.valueOf(dni));
            cleanPreceptorForm();
            mostrarListaPreceptores();
            JOptionPane.showMessageDialog(rootPane, "El Preceptor con DNI " + dni + " fue eliminado Exitosamente");
            listaCursos.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = {"NINGUNO"};

                public int getSize() {
                    return strings.length;
                }

                public String getElementAt(int i) {
                    return strings[i];
                }
            });
            }
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void tablaListadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaListadoMouseClicked
        btn_guardar.setText("Editar");
    }//GEN-LAST:event_tablaListadoMouseClicked

    private void txt_domicilioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_domicilioKeyTyped
        char validar = evt.getKeyChar();
        if ((validar < '0' || validar > '9') && (validar < '.' || validar > '.') && (validar < 'a' || validar > 'z') && (validar < 'A' || validar > 'Z') && (validar > 'ñ' || validar < 'Ñ') && (validar != (char) KeyEvent.VK_BACK_SPACE) && (validar != (char) KeyEvent.VK_SPACE) && (validar != (char) KeyEvent.VK_ENTER) && (validar < 'º' || validar > 'º')) {
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Debes Ingresar Sólo Caracteres Válidos", "Advertencia", 2);
            txt_domicilio.setCursor(null);
        }
    }//GEN-LAST:event_txt_domicilioKeyTyped

    private void txt_contraseniaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_contraseniaKeyTyped
        char validar = evt.getKeyChar();
        if ((validar < '0' || validar > '9') && (validar < 'a' || validar > 'z') && (validar < 'A' || validar > 'Z') && (validar > 'ñ' || validar < 'Ñ') && (validar != (char) KeyEvent.VK_BACK_SPACE) && (validar != (char) KeyEvent.VK_ENTER) && (validar < '°' || validar > '°')) {
            evt.consume();
            txt_contrasenia.setCursor(null);
        }
    }//GEN-LAST:event_txt_contraseniaKeyTyped

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        mostrarPreceptorBuscado();
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void txt_buscar_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscar_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_buscar_nombreActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        
         String dni = txt_dni_p.getText();
         if (dni.equals(String.valueOf(preceptorLogueado.getDni()))) {
                    JOptionPane.showMessageDialog(rootPane, "No se puede modificar el preceptor actualmente logueado al sistema.");
                    return;
        }
        if (txt_nombre.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un Nombre para el Preceptor");
            txt_nombre.requestFocus();
            return;
        }
        if (txt_apellido.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un Apellido para el Preceptor");
            txt_apellido.requestFocus();
            return;
        }
        if (txt_domicilio.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un Domicilio para el Preceptor");
            txt_domicilio.requestFocus();
            return;
        }
        if (listaCursos.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Debes elegir al menos un Curso para el Preceptor");
            listaCursos.requestFocus();
            return;
        }
        if (txt_dni_p.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un DNI para el Preceptor");
            txt_dni_p.requestFocus();
            return;
        }
        if (txt_contrasenia.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar una Contraseña para el Preceptor");
            txt_contrasenia.requestFocus();
            return;
        }
        if (txt_telefono_numero.getText().length() != 10) {
            JOptionPane.showMessageDialog(rootPane, "Debes ingresar un numero de telefono de 10 digitos para el Preceptor");
            txt_telefono_numero.requestFocus();
            return;
        }

        if (tablaListado.getSelectedRow() >= 0) {
            dni = tablaListado.getValueAt(tablaListado.getSelectedRow(), 0).toString();
            int sexoPreceptor = cboSexo.getSelectedIndex();
            String genero = "M";
            if (sexoPreceptor == 1) {
                genero = "F";
            }
            String password = "";
            int i = 0;
            while (i < txt_contrasenia.getPassword().length) {
                password = password + String.valueOf(txt_contrasenia.getPassword()[i]);
                i++;
            }
            Service.modificarPreceptor(Integer.valueOf(dni), txt_apellido.getText(), txt_nombre.getText(), txt_domicilio.getText(),
                    txt_telefono_numero.getText(), genero, password);
            Service.quitarCursoPreceptor(Integer.valueOf(dni));
            Service.asignarCursoPreceptor(Integer.valueOf(txt_dni_p.getText()), listaCursos.getSelectedValuesList());
            Service.actualizarPreceptor(preceptorLogueado);
            cleanPreceptorForm();
            mostrarListaPreceptores();
            inhabilitar();
            JOptionPane.showMessageDialog(rootPane, "El Preceptor con DNI = " + dni + " fue Modificado Exitosamente");
        }
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        mostrarListaPreceptores();
        cleanPreceptorForm();
        listaCursos.clearSelection();
    }//GEN-LAST:event_btn_refreshActionPerformed

    private String[] displayModel(List<Curso> l) {
        String[] model = new String[l.size()];
        int i = 0;
        for (Curso curso : l) {
            model[i] = curso.getCurso() + "° " + curso.getDivision();
            i++;
        }
        return model;
    }

    private String[] listarCursos() {

        List<Curso> l = Service.listarCursos();
        return displayModel(l);
    }

    private String[] listarCursosDisponibles() {

        List<Curso> l = Service.listarCursosDisponibles();
        return displayModel(l);
    }

    public void inhabilitar() {
        txt_apellido.setEnabled(false);
        txt_contrasenia.setEnabled(false);
        txt_dni_p.setEnabled(false);
        txt_domicilio.setEnabled(false);
        txt_nombre.setEnabled(false);
        txt_telefono_numero.setEnabled(false);
        chk_contrasenia.setEnabled(false);
        btn_cancelar.setEnabled(false);
        btn_guardar.setEnabled(false);
        listaCursos.setEnabled(false);
        btn_modificar.setEnabled(false);
    }

    public void habilitar() {
        txt_apellido.setEnabled(true);
        txt_buscar_apellido.setEnabled(true);
        txt_buscar_nombre.setEnabled(true);
        txt_contrasenia.setEnabled(true);
        txt_dni_p.setEnabled(true);
        tablaListado.setEnabled(true);
        txt_domicilio.setEnabled(true);
        txt_nombre.setEnabled(true);
        txt_telefono_numero.setEnabled(true);
        chk_contrasenia.setEnabled(true);
        btn_buscar.setEnabled(true);
        btn_cancelar.setEnabled(true);
        btn_eliminar.setEnabled(true);
        btn_guardar.setEnabled(true);
        listaCursos.setEnabled(true);
        btn_modificar.setEnabled(false);
    }

    private void cleanPreceptorForm() {
        txt_apellido.setText("");
        txt_buscar_apellido.setText("");
        txt_domicilio.setText("");
        txt_nombre.setText("");
        txt_telefono_numero.setText("");
        txt_dni_p.setText("");
        txt_contrasenia.setText("");
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Apellido;
    private javax.swing.JLabel Curso;
    private javax.swing.JLabel DNI;
    private javax.swing.JLabel Domicilio;
    private javax.swing.JLabel Ingreso;
    private javax.swing.JLabel Nombre;
    private javax.swing.JLabel Password;
    private javax.swing.JLabel Sexo;
    private javax.swing.JLabel Telefono;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JButton btn_nuevo;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_salir;
    private javax.swing.JTextField cantPreceptores;
    private javax.swing.JComboBox<String> cboSexo;
    private javax.swing.JCheckBox chk_contrasenia;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotalRegistros;
    private javax.swing.JList<String> listaCursos;
    private javax.swing.JPanel listaPreceptores;
    private javax.swing.JPanel registroPreceptores;
    private javax.swing.JTable tablaListado;
    private javax.swing.JTextField txt_apellido;
    private javax.swing.JTextField txt_buscar_apellido;
    private javax.swing.JTextField txt_buscar_nombre;
    private javax.swing.JPasswordField txt_contrasenia;
    private javax.swing.JTextField txt_dni_p;
    private javax.swing.JTextField txt_domicilio;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_telefono_numero;
    // End of variables declaration//GEN-END:variables

    private static FormPreceptor preceptor;
    private String accion = "guardar";

    public static FormPreceptor getInstance(Preceptor p) {
        if (preceptor == null) {
            preceptor = new FormPreceptor();
            preceptorLogueado = p;
        }
        return preceptor;
    }

}
